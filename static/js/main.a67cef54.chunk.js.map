{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["lemmaMapping","Object","fromEntries","compactLemmaMapping","split","flatMap","wordFormsLine","splitedWordFormsLine","word","map","f","includes","wordFrequency","compactWordFrequency","Tokenizer","text","toLowerCase","replace","t","trim","filter","length","Lemmatizer","this","tokens","token","hasOwnProperty","Fractionator","idx","words","catagories","unGroupedDistillates","Math","min","c","toString","result","concat","category","distillate","forEach","find","r","undefined","push","d","getIndexWithDefault","sort","a","b","Internationalization","translation","getLanugage","bind","i18n","languageMapping","language","navigator","multilanguage","RequestForInput","setStage","setInput","Fragment","className","href","type","onClick","demoText","RequestForText","getInput","style","height","window","innerHeight","placeholder","value","onChange","e","target","RequestForFile","props","inputFileRef","handleSubmit","React","createRef","event","input","current","files","fileReader","FileReader","onload","readAsText","preventDefault","onSubmit","accept","ref","Component","WordDisplay","state","translate","handleDoubleClick","setState","onDoubleClick","meaning","Dictionary","dict","dictionary","define","DictionaryLibrary","dictionaryURLs","updateDictionaryLibraryStatusFunc","dictionaryLibrary","selected","updateDictionaryLibraryStatus","status","url","downloadDictionary","dictionaryLibraryStatus","select","dls","dictionaryStatus","lang","thisDictionary","fetch","then","response","json","catch","error","ResultDisplay","tokenize","lemmas","lemmatize","display","fractionate","neverTranslate","key","join","getDictionary","reverse","unselect","dictionaryName","DoubleClickDefineOption","App","process","newDictionaryLibraryStatus","dictionaryLanguage","stage","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"u5zvBAOMA,EAA2CC,OAAOC,YACtDC,EAAoBC,MAAM,KAAKC,SAC7B,SAAAC,GACE,IAAMC,EAAuBD,EAAcF,MAAM,KAC3CI,EAAOD,EAAqB,GAElC,OADcA,EAAqB,GAAGH,MAAM,KAC/BK,KAAI,SAAAC,GAEf,MADoB,CAAC,MAAO,KAAM,IAAK,KAAM,KAAM,OACnCC,SAASD,GAChB,CAACF,EAAOE,EAAGF,GAEX,CAACE,EAAGF,UAOfI,EAA0BC,EAAqBT,MAAM,KAErDU,E,iGACKC,GACP,OAAOA,EACJC,cACAC,QAAQ,OAAQ,IAChBb,MAAM,cACNK,KAAI,SAAAS,GAAC,OAAIA,EAAEC,UACXC,QAAO,SAAAF,GAAC,OAAIA,EAAEG,OAAS,KACvBD,QAAO,SAAAF,GAAC,MAAU,MAANA,S,KAIbI,E,WAEJ,aAAe,yBADftB,kBACc,EACZuB,KAAKvB,aAAeA,E,sDAGZwB,GAA6B,IAAD,OACpC,OAAOA,EAAOf,KAAI,SAAAgB,GAChB,OAAI,EAAKzB,aAAa0B,eAAeD,GAC5B,EAAKzB,aAAayB,GAGlBA,S,KAWTE,E,iDACJf,cAAyCX,OAAOC,YAAYU,EAAcH,KAAI,SAACD,EAAMoB,GAAP,MAAe,CAACpB,EAAMoB,EAAM,O,wDAC9FC,GAAgC,IAAD,OACnCC,EAAuB,CAAC,IAAK,KAAM,KAAM,KAAM,MAAO,MAAO,MAAO,QACpEC,EAA2CF,EAAMpB,KAAI,SAAAD,GACzD,OAAI,EAAKI,cAAcc,eAAelB,GAC7B,CAACA,EAAMwB,KAAKC,IAAL,MAAAD,KAAI,YAAQF,EAAWV,QAAO,SAAAc,GAAC,OAAIA,EAAI,EAAKtB,cAAcJ,QAAQ2B,YAEzE,CAAC3B,EAAM,cAGZ4B,EAAwBN,EAAWrB,KAAI,SAAAyB,GAAC,OAAIA,EAAEC,cAAYE,OAAO,CAAC,YAAa5B,KACnF,SAAAyB,GAEE,MADsD,CAAEI,SAAUJ,EAAGK,WAAY,OAsBrF,OAlBAR,EAAqBS,SAAQ,SAAAD,GAC3B,IAAML,EAAIE,EAAOK,MAAK,SAAAC,GAAC,OAAIA,EAAEJ,WAAaC,EAAW,WAC3CI,IAANT,GAAoBA,EAAEK,WAAW5B,SAAS4B,EAAW,KACvDL,EAAEK,WAAWK,KAAKL,EAAW,OAGjCH,EAAOI,SAAQ,SAAAK,GACb,GAAmB,YAAfA,EAAEP,SAAwB,CAC5B,IAAMQ,EAAgD,SAACtC,GACrD,OAAI,EAAKI,cAAcc,eAAelB,GAC7B,EAAKI,cAAcJ,GAEnB,GAGXqC,EAAEN,WAAWQ,MAAK,SAACC,EAAGC,GAAJ,OAAUH,EAAoBG,GAAKH,EAAoBE,UAGtEZ,M,KAILc,E,WACJ,aAAe,yBAKfC,YAAwD,CACtD,aAAc,CAAE,QAAS,2BAAQ,QAAS,4BAC1C,cAAe,CAAE,QAAS,2BAAQ,QAAS,4BAC3C,YAAe,CAAE,QAAS,eAAM,QAAS,gBACzC,KAAQ,CAAE,QAAS,eAAM,QAAS,gBAClC,kBAAmB,CAAE,QAAS,6CAAW,QAAS,8CAClD,OAAU,CAAE,QAAS,eAAM,QAAS,iBAVpC5B,KAAK6B,YAAc7B,KAAK6B,YAAYC,KAAK9B,MACzCA,KAAK+B,KAAO/B,KAAK+B,KAAKD,KAAK9B,M,0DAa3B,IAAMgC,EAA+C,CACnD,GAAM,QAAS,GAAM,QACrB,QAAS,QAAS,QAAS,QAC3B,QAAS,QAAS,QAAS,SAEzBC,EAAWC,UAAUD,SAIzB,OAHID,EAAgB7B,eAAe8B,KACjCA,EAAWD,EAAgBC,IAEtBA,I,2BAGJzC,GACH,IAAMyC,EAAWjC,KAAK6B,cACtB,GAAoB,kBAATrC,EAAmB,CAC5B,GAAiB,UAAbyC,EAAsB,CACxB,IAAME,EAAgBnC,KAAK4B,YAAYpC,GACvC,OAAI2C,EAAchC,eAAe8B,GACxBE,EAAcF,GAEdzC,EAIT,OAAOA,EAGT,OAAIA,EAAKW,eAAe8B,GACfzC,EAAKyC,GAELzC,EAAK,a,KAMpB,SAASuC,EAAKvC,GACZ,OAAO,IAAImC,GAAuBI,KAAKvC,GAczC,IAAM4C,EAAqE,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAb,OACzE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,uBAAGA,UAAU,QACVT,EAAK,CACJ,QAAS,wUACT,QAAS,yoBACT,QAAS,4oBAGb,uBAAGS,UAAU,QACVT,EAAK,CACJ,QAAS,2SACT,QAAS,4vBACT,QAAS,+vBAGb,uBAAGS,UAAU,QACVT,EAAK,CACJ,QAAS,8JACT,QAAS,wVACT,QAAS,0VAEX,uBAAGU,KAAK,0CACLV,EAAK,CACJ,QAAS,WACT,QAAS,2BACT,QAAS,iCAMnB,yBAAKS,UAAU,OACb,yBAAKA,UAAU,wCACb,4BAAQE,KAAK,SAASF,UAAU,0BAA0BG,QAAS,WAAQN,EAAS,kBAAmBC,EAASM,KAAcb,EAAK,SACnI,4BAAQW,KAAK,SAASF,UAAU,0BAA0BG,QAAS,kBAAMN,EAAS,oBAAoBN,EAAK,eAC3G,4BAAQW,KAAK,SAASF,UAAU,0BAA0BG,QAAS,kBAAMN,EAAS,oBAAoBN,EAAK,oBAK7Gc,EAAuE,SAAC,GAAD,IAAGR,EAAH,EAAGA,SAAUS,EAAb,EAAaA,SAAUR,EAAvB,EAAuBA,SAAvB,OAC3E,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,8BAAUO,MAAO,CAAEC,OAA6B,GAArBC,OAAOC,aAAqBV,UAAU,oBAAoBW,YAAapB,EAAK,mBAAoBqB,MAAON,IAAYO,SAAU,SAAAC,GAAC,OAAIhB,EAASgB,EAAEC,OAAOH,YAGnL,yBAAKZ,UAAU,OACb,yBAAKA,UAAU,wCACb,4BAAQE,KAAK,SAASF,UAAU,0BAA0BG,QAAS,WAAQN,EAAS,mBAAoBC,EAAS,MAAQP,EAAK,WAC9H,4BAAQW,KAAK,SAASF,UAAU,0BAA0BG,QAAS,WAAQN,EAAS,kBAAmBC,EAAS,MAAQP,EAAK,gBAC7H,4BAAQW,KAAK,SAASF,UAAU,yBAAyBG,QAAS,kBAAMN,EAAS,mBAAmBN,EAAK,oBAK3GyB,E,kDAEJ,WAAYC,GAAkC,IAAD,8BAC3C,cAAMA,IAFRC,kBAC6C,EAE3C,EAAKC,aAAe,EAAKA,aAAa7B,KAAlB,gBACpB,EAAK4B,aAAeE,IAAMC,YAHiB,E,yDAMhCC,GAAgD,IAAD,OACpDC,EAAQ/D,KAAK0D,aAAaM,QAChC,GAAID,GAAyB,OAAhBA,EAAME,MAAgB,CACjC,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,OAAS,WAClB,IAAMvD,EAASqD,EAAWrD,OACJ,kBAAXA,GACT,EAAK4C,MAAMnB,SAASzB,IAGxBqD,EAAWG,WAAWN,EAAME,MAAM,IAClCjE,KAAKyD,MAAMpB,SAAS,iBAEtByB,EAAMQ,mB,+BAGE,IAAD,OACP,OAAO,yBAAK9B,UAAU,OACpB,yBAAKA,UAAU,UACb,0BAAM+B,SAAUvE,KAAK2D,cACnB,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,wCACb,yBAAKA,UAAU,cACb,2BAAOE,KAAK,OAAOF,UAAU,oBAAoBgC,OAAO,YAAYC,IAAKzE,KAAK0D,kBAIpF,yBAAKlB,UAAU,OACb,yBAAKA,UAAU,wCACb,4BAAQE,KAAK,SAASF,UAAU,0BAA0BG,QAAS,WAAQ,EAAKc,MAAMpB,SAAS,mBAAoB,EAAKoB,MAAMnB,SAAS,MAAQP,EAAK,WACpJ,4BAAQW,KAAK,SAASF,UAAU,0BAA0BG,QAAS,WAAQ,EAAKc,MAAMpB,SAAS,kBAAmB,EAAKoB,MAAMnB,SAAS,MAAQP,EAAK,eACnJ,2BAAOS,UAAU,yBAAyBE,KAAK,SAASU,MAAOrB,EAAK,0B,GAvCrD6B,IAAMc,WAgD7BC,E,kDACJ,WAAYlB,GAA2C,IAAD,8BACpD,cAAMA,IACDmB,MAAQ,CAAEC,WAAW,GAC1B,EAAKC,kBAAoB,EAAKA,kBAAkBhD,KAAvB,gBAH2B,E,gEAOpD9B,KAAK+E,SAAS,CAAEF,WAAY7E,KAAK4E,MAAMC,c,+BAIvC,OAAI7E,KAAK4E,MAAMC,UACN,uBAAGrC,UAAU,aAAawC,cAAehF,KAAK8E,mBACnD,0CAAY9E,KAAKyD,MAAMxE,OADlB,YAECe,KAAKyD,MAAMwB,UAGZ,0BAAMD,cAAehF,KAAK8E,kBAAmBtC,UAAU,QAAvD,UAAkExC,KAAKyD,MAAMxE,KAA7E,U,GAlBa2E,IAAMc,WAuB1BQ,E,WAGJ,WAAYC,GAAmC,yBAF/CC,gBAE8C,EAC5CpF,KAAKoF,WAAaD,EAClBnF,KAAKqF,OAASrF,KAAKqF,OAAOvD,KAAK9B,M,mDAG1Bf,GACL,OAAIe,KAAKoF,WAAWjF,eAAelB,GAC1Be,KAAKoF,WAAWnG,GAEhB,O,KAYPqG,E,WAUJ,WAAYC,EAA4CC,GAGtD,IAAK,IAAMvD,KAHuH,yBATpIwD,uBASmI,OAFnIC,cAEmI,OADnIC,mCACmI,EACjI3F,KAAKyF,kBAAoB,GACzBzF,KAAK0F,SAAW,KACOH,EACrBvF,KAAKyF,kBAAkBxD,GAAY,CACjCmD,WAAY,KACZQ,OAAQ,gBACRC,IAAKN,EAAetD,IAGxBjC,KAAK2F,8BAAgCH,EACrCxF,KAAK8F,mBAAqB9F,KAAK8F,mBAAmBhE,KAAK9B,MACvDA,KAAK+F,wBAA0B/F,KAAK+F,wBAAwBjE,KAAK9B,MACjEA,KAAKgG,OAAShG,KAAKgG,OAAOlE,KAAK9B,M,sEAI/B,IAAMiG,EAA+B,CAAEP,SAAU1F,KAAK0F,SAAUQ,iBAAkB,IAClF,IAAK,IAAMC,KAAQnG,KAAKyF,kBACtBQ,EAAIC,iBAAiBC,GAAQnG,KAAKyF,kBAAkBU,GAAMP,OAE5D,OAAOK,I,iCAIPjG,KAAK0F,SAAW,KAChB1F,KAAK2F,8BAA8B3F,KAAK+F,6B,6BAGnCI,GACDnG,KAAKyF,kBAAkBtF,eAAegG,KACxCnG,KAAK0F,SAAWS,EAChBnG,KAAK2F,8BAA8B3F,KAAK+F,2BACxC/F,KAAK8F,mBAAmBK,M,sCAK1B,OAAsB,OAAlBnG,KAAK0F,SACA1F,KAAKyF,kBAAkBzF,KAAK0F,UAAUN,WAEtC,O,yCAIQnD,GAAmB,IAAD,OACnC,GAAIjC,KAAKyF,kBAAkBtF,eAAe8B,IAAyD,UAA5CjC,KAAKyF,kBAAkBxD,GAAU2D,OAAoB,CAC1G,IAAMQ,EAAiBpG,KAAKyF,kBAAkBxD,GACxC4D,EAAMO,EAAeP,IAC3BO,EAAeR,OAAS,cACxB5F,KAAK2F,8BAA8B3F,KAAK+F,2BACxCM,MAAMR,GACHS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAlB,GACJgB,EAAeR,OAAS,QACxBQ,EAAehB,WAAa,IAAIF,EAAWE,GAC3C,EAAKO,8BAA8B,EAAKI,8BAEzCU,OAAM,SAAAC,GACLN,EAAeR,OAAS,QACxB,EAAKD,8BAA8B,EAAKI,mC,KAM5CY,EAKD,SAAC,GAAyD,IAAvDtE,EAAsD,EAAtDA,SAAUS,EAA4C,EAA5CA,SAAUR,EAAkC,EAAlCA,SAAUmD,EAAwB,EAAxBA,kBAC9BxF,GAAS,IAAIV,GAAYqH,SAAS9D,KAClC+D,GAAS,IAAI9G,GAAa+G,UAAU7G,GAoC1C,IAAM8G,GAnCc,IAAI3G,GAAe4G,YAAYH,GAmCvB/H,SAC1B,YAA+B,IAnCXwB,EAAiB2G,EAmClClG,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WACX,OAA0B,IAAtBA,EAAWlB,OACN,GAEA,CACL,yBAAK0C,UAAU,0CAA0C0E,IAAG,gBAAWnG,KAxCzDT,EAyCEU,EAzCeiG,EAyCU,YAAblG,EAxCC,OAA/B0E,EAAkBC,UACduB,GAC0E,UAA3ExB,EAAkBA,kBAAkBA,EAAkBC,UAAUE,OAU9D,CAAC,uBAAGpD,UAAU,cAAc0E,IAAG,sBAAyB5G,EAAM6G,KAAK,OATnE7G,EAAMpB,KAAI,SAAAD,GACf,IAAIgG,EAAkB,GAChBG,EAAaK,EAAkB2B,gBAIrC,OAHmB,OAAfhC,IACFH,EAAUG,EAAWC,OAAOpG,IAEvB,kBAAC,EAAD,CAAaiI,IAAKjI,EAAMA,KAAMA,EAAMgG,QAASA,SAiClD,yBAAKzC,UAAU,YAAY0E,IAAG,oBAAenG,IAAaA,OAIhEsG,UACF,OAAO,kBAAC,IAAM9E,SAAP,KACL,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACZuE,IAGL,yBAAKvE,UAAU,OACb,yBAAKA,UAAU,kDACb,4BAAQE,KAAK,SAASF,UAAU,oCAAoCG,QAAS,WAAQN,EAAS,mBAAoBC,EAAS,MAAQP,EAAK,WACxI,4BAAQW,KAAK,SAASF,UAAU,oCAAoCG,QAAS,WAAQN,EAAS,kBAAmBC,EAAS,MAAQP,EAAK,eACvI,4BAAQW,KAAK,SAASF,UAAU,oCAAoCG,QAAS,WAAQN,EAAS,kBAAmBC,EAAS,MAAQP,EAAK,gBACvI,yBAAKS,UAAU,wBACb,4BAAQA,UAAU,sBAAsBa,SAAU,SAACS,GAEnC,KADAA,EAAMP,OAAOH,MAEzBqC,EAAkB6B,WAElB7B,EAAkBO,OAAOlC,EAAMP,OAAOH,SAGxC,4BAAQsC,SAAyC,OAA/BD,EAAkBC,SAAmBtC,MAAM,IAC1DrB,EAAK,CACJ,QAAS,yCACT,QAAS,+DACT,QAAS,kEAGb,4BAAQ2D,SAAyC,UAA/BD,EAAkBC,SAAsBtC,MAAM,SA3D1E,SAAiC5D,EAAcyC,EAAkBsF,GAC/D,IAAMrB,EAAmBT,EAAkBA,kBAAkBxD,GAAU2D,OACvE,MAAyB,UAArBM,GAAqD,kBAArBA,EAC3B1G,EAEAuC,EADuB,gBAArBmE,EACG,CACV,QAAQ,eAAR,OAAwBqB,EAAxB,kBACA,QAAQ,2BAAR,OAAgBA,EAAhB,mBACA,QAAQ,2BAAR,OAAgBA,EAAhB,oBAGU,CACV,QAAS,yDACT,QAAS,uFACT,QAAS,yFA8CFC,CAAwBzF,EAAK,CAC5B,QAAS,4CACT,QAAS,+DACT,QAAS,iEACP,QACFA,EAAK,CACH,QAAS,kBACT,QAAS,eACT,QAAS,yBA6DZ0F,E,kDA3Cb,WAAYhE,GAAa,IAAD,uBACtB,cAAMA,IAFRgC,uBACwB,EAEtB,EAAKA,kBAAoB,IAAIH,EAC3B,CAAE,QAASoC,wCACX,SAACC,GAAD,OAAgC,EAAK5C,SAAS,CAAEgB,wBAAyB4B,OAE3E,IAAIC,GAAqB,IAAIjG,GAAuBE,cAN9B,OAOtB+F,EAA4C,UAAvBA,EAAiC,QAAUA,EAChE,EAAKnC,kBAAkBK,mBAAmB8B,GAC1C,EAAKhD,MAAQ,CACXiD,MAAO,kBACP9D,MAAO,GACPgC,wBAAyB,EAAKN,kBAAkBM,2BAElD,EAAK1D,SAAW,EAAKA,SAASP,KAAd,gBAChB,EAAKQ,SAAW,EAAKA,SAASR,KAAd,gBAChB,EAAKgB,SAAW,EAAKA,SAAShB,KAAd,gBAhBM,E,qDAmBf+F,GACP7H,KAAK+E,SAAS,CAAE,MAAS8C,M,+BAGlB9D,GACP/D,KAAK+E,SAAS,CAAE,MAAShB,M,iCAIzB,OAAO/D,KAAK4E,MAAMb,Q,+BAIlB,OAAO,yBAAKvB,UAAU,wCACpB,yBAAKA,UAAU,aACS,oBAArBxC,KAAK4E,MAAMiD,OAA+B,kBAAC,EAAD,CAAiBxF,SAAUrC,KAAKqC,SAAUC,SAAUtC,KAAKsC,WAC9E,mBAArBtC,KAAK4E,MAAMiD,OAA8B,kBAAC,EAAD,CAAgBxF,SAAUrC,KAAKqC,SAAUS,SAAU9C,KAAK8C,SAAUR,SAAUtC,KAAKsC,WACrG,kBAArBtC,KAAK4E,MAAMiD,OAA6B,kBAAC,EAAD,CAAepC,kBAAmBzF,KAAKyF,kBAAmBpD,SAAUrC,KAAKqC,SAAUS,SAAU9C,KAAK8C,SAAUR,SAAUtC,KAAKsC,WAC9I,mBAArBtC,KAAK4E,MAAMiD,OAA8B,kBAAC,EAAD,CAAgBxF,SAAUrC,KAAKqC,SAAUC,SAAUtC,KAAKsC,iB,GA3CxFsB,IAAMc,WC3elBoD,EAAcC,QACW,cAA7B9E,OAAO+E,SAASC,UAEe,UAA7BhF,OAAO+E,SAASC,UAEhBhF,OAAO+E,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCnG,UAAUoG,cACPC,SAASH,GACT9B,MAAK,SAAAkC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9D,QACf1C,UAAUoG,cAAcO,YAI1BC,QAAQC,IACN,iHAKEV,GAAUA,EAAOW,UACnBX,EAAOW,SAASR,KAMlBM,QAAQC,IAAI,sCAGRV,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUT,WAO5B/B,OAAM,SAAAC,GACLoC,QAAQpC,MAAM,4CAA6CA,MClGjEwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAIxBjD,MAAMqB,0DDaD,SAAkBW,GACvB,GAA6C,kBAAmBnG,UAAW,CAMzE,GAJkB,IAAIqH,IACpB7B,gBACAzE,OAAO+E,SAASvF,MAEJ+G,SAAWvG,OAAO+E,SAASwB,OAIvC,OAGFvG,OAAOwG,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMV,gBAAN,sBAEPI,IAgEV,SAAiCM,EAAeC,GAE9ChC,MAAM+B,EAAO,CACXsB,QAAS,CAAE,iBAAkB,YAE5BpD,MAAK,SAAAC,GAEJ,IAAMoD,EAAcpD,EAASmD,QAAQE,IAAI,gBAEnB,MAApBrD,EAASX,QACO,MAAf+D,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C3H,UAAUoG,cAAcwB,MAAMxD,MAAK,SAAAkC,GACjCA,EAAauB,aAAazD,MAAK,WAC7BrD,OAAO+E,SAASgC,eAKpB7B,EAAgBC,EAAOC,MAG1B5B,OAAM,WACLqC,QAAQC,IACN,oEAvFAkB,CAAwB7B,EAAOC,GAI/BnG,UAAUoG,cAAcwB,MAAMxD,MAAK,WACjCwC,QAAQC,IACN,iHAMJZ,EAAgBC,EAAOC,OCzC/BC,K","file":"static/js/main.a67cef54.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport compactLemmaMapping from './compact_lemma_mapping.json'\nimport compactWordFrequency from './compact_word_frequency.json'\nimport demoText from './a_farewell_to_arms.json'\n\nconst lemmaMapping: { [word: string]: string } = Object.fromEntries(\n  compactLemmaMapping.split(\";\").flatMap(\n    wordFormsLine => {\n      const splitedWordFormsLine = wordFormsLine.split(\":\");\n      const word = splitedWordFormsLine[0];\n      const forms = splitedWordFormsLine[1].split(\",\");\n      return forms.map(f => {\n        const compactForm = [\"ing\", \"ed\", \"s\", \"es\", \"er\", \"est\"];\n        if (compactForm.includes(f)) {\n          return [word + f, word];\n        } else {\n          return [f, word];\n        }\n      });\n    }\n  )\n)\n\nconst wordFrequency: string[] = compactWordFrequency.split(\";\");\n\nclass Tokenizer {\n  tokenize(text: string): string[] {\n    return text\n      .toLowerCase()\n      .replace(/n't/g, \"\")\n      .split(/[^a-zA-Z-]/)\n      .map(t => t.trim())\n      .filter(t => t.length > 2)\n      .filter(t => t !== \"-\")\n  }\n}\n\nclass Lemmatizer {\n  lemmaMapping: { [key: string]: string }\n  constructor() {\n    this.lemmaMapping = lemmaMapping;\n\n  }\n  lemmatize(tokens: string[]): string[] {\n    return tokens.map(token => {\n      if (this.lemmaMapping.hasOwnProperty(token)) {\n        return this.lemmaMapping[token];\n      }\n      else {\n        return token;\n      }\n    })\n  }\n}\n\ninterface Distillate {\n  category: string;\n  distillate: string[]\n}\n\nclass Fractionator {\n  wordFrequency: { [w: string]: number } = Object.fromEntries(wordFrequency.map((word, idx) => [word, idx + 1]))\n  fractionate(words: string[]): Distillate[] {\n    const catagories: number[] = [800, 1600, 3200, 6400, 12800, 25600, 51200, 102400]\n    const unGroupedDistillates: [string, string][] = words.map(word => {\n      if (this.wordFrequency.hasOwnProperty(word)) {\n        return [word, Math.min(...catagories.filter(c => c > this.wordFrequency[word])).toString()];\n      } else {\n        return [word, \"Unknown\"];\n      }\n    });\n    const result: Distillate[] = (catagories.map(c => c.toString()).concat([\"Unknown\"])).map(\n      c => {\n        const r: { category: string, distillate: string[] } = { category: c, distillate: [] };\n        return r;\n      }\n    );\n    unGroupedDistillates.forEach(distillate => {\n      const c = result.find(r => r.category === distillate[1]);\n      if (c !== undefined && !c.distillate.includes(distillate[0])) {\n        c.distillate.push(distillate[0]);\n      }\n    });\n    result.forEach(d => {\n      if (d.category !== \"Unknown\") {\n        const getIndexWithDefault: (word: string) => number = (word) => {\n          if (this.wordFrequency.hasOwnProperty(word)) {\n            return this.wordFrequency[word];\n          } else {\n            return 0;\n          }\n        }\n        d.distillate.sort((a, b) => getIndexWithDefault(b) - getIndexWithDefault(a));\n      }\n    })\n    return result;\n  }\n}\n\nclass Internationalization {\n  constructor() {\n    this.getLanugage = this.getLanugage.bind(this);\n    this.i18n = this.i18n.bind(this);\n  }\n\n  translation: { [t: string]: { [l: string]: string } } = {\n    \"Paste Text\": { \"zh-CN\": \"粘贴文本\", \"zh-TW\": \"粘貼文本\" },\n    \"Choose File\": { \"zh-CN\": \"选择文件\", \"zh-TW\": \"選擇文件\" },\n    \"Fractionate\": { \"zh-CN\": \"分馏\", \"zh-TW\": \"分餾\" },\n    \"Demo\": { \"zh-CN\": \"演示\", \"zh-TW\": \"演示\" },\n    \"Paste Text Here\": { \"zh-CN\": \"在这里粘贴文本\", \"zh-TW\": \"在這裡粘貼文本\" },\n    \"Return\": { \"zh-CN\": \"返回\", \"zh-TW\": \"返回\" }\n  }\n\n  getLanugage(): string {\n    const languageMapping: { [alias: string]: string } = {\n      \"en\": \"en-US\", \"zh\": \"zh-CN\",\n      \"zh-cn\": \"zh-CN\", \"zh-tw\": \"zh-TW\",\n      \"zh-HK\": \"zh-TW\", \"zh-hk\": \"zh-TW\"\n    };\n    let language = navigator.language;\n    if (languageMapping.hasOwnProperty(language)) {\n      language = languageMapping[language];\n    }\n    return language;\n  }\n\n  i18n(text: string | { [lang: string]: string }): string {\n    const language = this.getLanugage();\n    if (typeof text === \"string\") {\n      if (language !== \"en-US\") {\n        const multilanguage = this.translation[text];\n        if (multilanguage.hasOwnProperty(language)) {\n          return multilanguage[language];\n        } else {\n          return text;\n        }\n      }\n      else {\n        return text;\n      }\n    } else {\n      if (text.hasOwnProperty(language)) {\n        return text[language];\n      } else {\n        return text[\"en-US\"]\n      }\n    }\n  }\n}\n\nfunction i18n(text: string | { [lang: string]: string }): string {\n  return new Internationalization().i18n(text);\n}\n\ninterface GeneralAppComponentProps {\n  setStage: (stage: AppStage) => void;\n  setInput: (input: string) => void\n}\n\ninterface FullAccessAppComponentProps {\n  setStage: (stage: AppStage) => void;\n  setInput: (input: string) => void\n  getInput: () => string;\n}\n\nconst RequestForInput: React.FunctionComponent<GeneralAppComponentProps> = ({ setStage, setInput }) =>\n  <React.Fragment>\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <p className=\"mb-1\">\n          {i18n({\n            \"en-US\": \"Fractionator is an English learning tool for English language learners. Fractionator can create a word list sorted from least common words to most common words form input text so you can learn the vocabulary of a book or a movie ahead without spoilers and have a not-interrupted-by-dictionary reading or watching experiments.\",\n            \"zh-CN\": \"分馏器·Fractionator 是一个为英语学习者提供的英语学习工具。分馏器·Fractionator 可以从输入的文本中提取出一个按照词频从最不常见到最常见的单词表。这样你就可以在不被剧透的情况下提前学习所有的词汇，获得一个不被查字典打扰的阅读或观看体验。\",\n            \"zh-TW\": \"分餾器·Fractionator 是一個為英語學習者提供的英語學習工具。分餾器·Fractionator 可以從輸入的文本中提取出一個按照詞頻從最不常見到最常見的單詞表。這樣你就可以在不被劇透的情況下提前學習所有的詞彙，獲得一個不被查字典打擾的閱讀或觀看體驗。\"\n          })}\n        </p>\n        <p className=\"mb-1\">\n          {i18n({\n            \"en-US\": \"To use Fractionator, click [Paste Text] button, then paste your input text or click [Choose File] button, choose a text file (.txt), or a subtitle file (.srt). Finally, click [Fractionate] button to fractionating result. Try It now by clicking the [Demo] button to fractionate some example text. \",\n            \"zh-CN\": \"点击【粘贴文本】按钮，然后黏贴想要分馏的文本，或者点击【选择文件】按钮，选择一个文本文档（.txt）或字幕文档（.srt）来开始使用分馏器·Fractionator。当输入好文字或选择好文件时，点击【分馏】按钮来查看分馏的结果。点击【演示】按钮用预设的样本文本来试一试分馏器·Fractionator 的效果。\",\n            \"zh-TW\": \"點擊【粘貼文本】按鈕，然後黏貼想要分餾的文本，或者點擊【選擇文件】按鈕，選擇一個文本文檔（.txt）或字幕文檔（.srt）來開始使用分餾器·Fractionator。當輸入好文字或選擇好文件時，點擊【分餾】按鈕來查看分餾的結果。點擊【演示】按鈕用預設的樣本文本來試一試分餾器·Fractionator 的效果。\"\n          })}\n        </p>\n        <p className=\"mb-1\">\n          {i18n({\n            \"en-US\": \"Fractionator is free software, all text is processed locally on your browser without been uploaded to any servers. For more information, visit the project \",\n            \"zh-CN\": \"分馏器·Fractionator 是一个自由软件，所有的文字处理都是在浏览器本地进行的，你所输入的任何的内容都不会被上传。更多信息请访问\",\n            \"zh-TW\": \"分餾器·Fractionator 是一個自由軟件，所有的文字處理都是在瀏覽器本地進行的，你所輸入的任何的內容都不會被上傳。更多信息請訪問\"\n          })}\n          <a href=\"https://github.com/tetrau/fractionator\">\n            {i18n({\n              \"en-US\": \"homepage\",\n              \"zh-CN\": \"项目主页\",\n              \"zh-TW\": \"項目主頁\"\n            })}\n          </a>\n        </p>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-12 d-flex justify-content-center\">\n        <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => { setStage(\"RequestForText\"); setInput(demoText) }}>{i18n(\"Demo\")}</button>\n        <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => setStage(\"RequestForText\")}>{i18n(\"Paste Text\")}</button>\n        <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => setStage(\"RequestForFile\")}>{i18n(\"Choose File\")}</button>\n      </div>\n    </div>\n  </React.Fragment>\n\nconst RequestForText: React.FunctionComponent<FullAccessAppComponentProps> = ({ setStage, getInput, setInput }) =>\n  <React.Fragment>\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <textarea style={{ height: window.innerHeight * 0.5 }} className=\"form-control mb-1\" placeholder={i18n(\"Paste Text Here\")} value={getInput()} onChange={e => setInput(e.target.value)} ></textarea>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-12 d-flex justify-content-center\">\n        <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => { setStage(\"RequestForInput\"); setInput(\"\") }}>{i18n(\"Return\")}</button>\n        <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => { setStage(\"RequestForFile\"); setInput(\"\") }}>{i18n(\"Choose File\")}</button>\n        <button type=\"button\" className=\"btn btn-outline-danger\" onClick={() => setStage(\"ResultDisplay\")}>{i18n(\"Fractionate\")}</button>\n      </div>\n    </div>\n  </React.Fragment>\n\nclass RequestForFile extends React.Component<GeneralAppComponentProps, {}> {\n  inputFileRef: React.RefObject<HTMLInputElement>\n  constructor(props: GeneralAppComponentProps) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.inputFileRef = React.createRef();\n  }\n\n  handleSubmit(event: React.FormEvent<HTMLFormElement>): void {\n    const input = this.inputFileRef.current;\n    if (input && input.files !== null) {\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        const result = fileReader.result;\n        if (typeof result === \"string\") {\n          this.props.setInput(result)\n        }\n      }\n      fileReader.readAsText(input.files[0]);\n      this.props.setStage(\"ResultDisplay\");\n    }\n    event.preventDefault();\n  }\n\n  render() {\n    return <div className=\"row\">\n      <div className=\"col-12\">\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"row\">\n            <div className=\"col-12 d-flex justify-content-center\">\n              <div className=\"form-group\">\n                <input type=\"file\" className=\"form-control-file\" accept=\".txt,.srt\" ref={this.inputFileRef} />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-12 d-flex justify-content-center\">\n              <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => { this.props.setStage(\"RequestForInput\"); this.props.setInput(\"\") }}>{i18n(\"Return\")}</button>\n              <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => { this.props.setStage(\"RequestForText\"); this.props.setInput(\"\") }}>{i18n(\"Paste Text\")}</button>\n              <input className=\"btn btn-outline-danger\" type=\"submit\" value={i18n(\"Fractionate\")} />\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  }\n}\n\nclass WordDisplay extends React.Component<{ word: string, meaning: string }, { translate: boolean }> {\n  constructor(props: { word: string, meaning: string }) {\n    super(props);\n    this.state = { translate: false };\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\n  }\n\n  handleDoubleClick() {\n    this.setState({ translate: !this.state.translate });\n  }\n\n  render() {\n    if (this.state.translate) {\n      return <p className=\"mb-1 w-100\" onDoubleClick={this.handleDoubleClick}>\n        <strong>{`${this.props.word}`}</strong>\n        {`: ${this.props.meaning}`}\n      </p>\n    } else {\n      return <span onDoubleClick={this.handleDoubleClick} className=\"mr-1\">{`${this.props.word} `}</span>\n    }\n  }\n}\n\nclass Dictionary {\n  dictionary: { [word: string]: string }\n\n  constructor(dict: { [word: string]: string }) {\n    this.dictionary = dict;\n    this.define = this.define.bind(this);\n  }\n\n  define(word: string): string {\n    if (this.dictionary.hasOwnProperty(word)) {\n      return this.dictionary[word];\n    } else {\n      return \"\"\n    }\n  }\n}\n\ninterface DictionaryLibraryStatus {\n  selected: string | null;\n  dictionaryStatus: {\n    [lang: string]: \"Ready\" | \"Downloading\" | \"Error\" | \"NotDownloaded\"\n  }\n}\n\nclass DictionaryLibrary {\n  dictionaryLibrary: {\n    [lang: string]: {\n      dictionary: Dictionary | null,\n      status: \"Ready\" | \"Downloading\" | \"Error\" | \"NotDownloaded\",\n      url: string\n    }\n  }\n  selected: string | null\n  updateDictionaryLibraryStatus: (dls: DictionaryLibraryStatus) => void\n  constructor(dictionaryURLs: { [lang: string]: string }, updateDictionaryLibraryStatusFunc: (dls: DictionaryLibraryStatus) => void) {\n    this.dictionaryLibrary = {};\n    this.selected = null;\n    for (const language in dictionaryURLs) {\n      this.dictionaryLibrary[language] = {\n        dictionary: null,\n        status: \"NotDownloaded\",\n        url: dictionaryURLs[language]\n      }\n    }\n    this.updateDictionaryLibraryStatus = updateDictionaryLibraryStatusFunc;\n    this.downloadDictionary = this.downloadDictionary.bind(this);\n    this.dictionaryLibraryStatus = this.dictionaryLibraryStatus.bind(this);\n    this.select = this.select.bind(this);\n  }\n\n  dictionaryLibraryStatus(): DictionaryLibraryStatus {\n    const dls: DictionaryLibraryStatus = { selected: this.selected, dictionaryStatus: {} };\n    for (const lang in this.dictionaryLibrary) {\n      dls.dictionaryStatus[lang] = this.dictionaryLibrary[lang].status;\n    }\n    return dls\n  }\n\n  unselect(): void {\n    this.selected = null;\n    this.updateDictionaryLibraryStatus(this.dictionaryLibraryStatus());\n  }\n\n  select(lang: string): void {\n    if (this.dictionaryLibrary.hasOwnProperty(lang)) {\n      this.selected = lang;\n      this.updateDictionaryLibraryStatus(this.dictionaryLibraryStatus());\n      this.downloadDictionary(lang);\n    }\n  }\n\n  getDictionary(): Dictionary | null {\n    if (this.selected !== null) {\n      return this.dictionaryLibrary[this.selected].dictionary;\n    } else {\n      return null;\n    }\n  }\n\n  downloadDictionary(language: string) {\n    if (this.dictionaryLibrary.hasOwnProperty(language) && this.dictionaryLibrary[language].status !== \"Ready\") {\n      const thisDictionary = this.dictionaryLibrary[language]\n      const url = thisDictionary.url;\n      thisDictionary.status = \"Downloading\";\n      this.updateDictionaryLibraryStatus(this.dictionaryLibraryStatus());\n      fetch(url)\n        .then(response => response.json())\n        .then(dictionary => {\n          thisDictionary.status = \"Ready\";\n          thisDictionary.dictionary = new Dictionary(dictionary);\n          this.updateDictionaryLibraryStatus(this.dictionaryLibraryStatus());\n        })\n        .catch(error => {\n          thisDictionary.status = \"Error\";\n          this.updateDictionaryLibraryStatus(this.dictionaryLibraryStatus());\n        })\n    }\n  }\n}\n\nconst ResultDisplay: React.FunctionComponent<{\n  setStage: (stage: AppStage) => void,\n  setInput: (input: string) => void,\n  getInput: () => string,\n  dictionaryLibrary: DictionaryLibrary\n}> = ({ setStage, getInput, setInput, dictionaryLibrary }) => {\n  const tokens = new Tokenizer().tokenize(getInput());\n  const lemmas = new Lemmatizer().lemmatize(tokens);\n  const distillates = new Fractionator().fractionate(lemmas);\n  function displayWords(words: string[], neverTranslate: boolean): React.ReactNode[] {\n    if (dictionaryLibrary.selected !== null\n        && !neverTranslate\n        && dictionaryLibrary.dictionaryLibrary[dictionaryLibrary.selected].status === \"Ready\") {\n      return words.map(word => {\n        let meaning: string = \"\"\n        const dictionary = dictionaryLibrary.getDictionary()\n        if (dictionary !== null) {\n          meaning = dictionary.define(word);\n        }\n        return <WordDisplay key={word} word={word} meaning={meaning} />;\n      });\n    } else {\n      return [<p className=\"text-center\" key={`distillate-Unknown`}>{words.join(\" \")}</p>]\n    }\n  }\n  function DoubleClickDefineOption(text: string, language: string, dictionaryName: string): string {\n    const dictionaryStatus = dictionaryLibrary.dictionaryLibrary[language].status;\n    if (dictionaryStatus === \"Ready\" || dictionaryStatus === \"NotDownloaded\") {\n      return text;\n    } else if (dictionaryStatus === \"Downloading\") {\n      return i18n({\n        \"en-US\": `Downloading ${dictionaryName} Dictionary...`,\n        \"zh-CN\": `正在下载${dictionaryName}字典...`,\n        \"zh-TW\": `正在下載${dictionaryName}字典...`\n      });\n    } else {\n      return i18n({\n        \"en-US\": \"Dictionary Downloading Failed, Please Reload this Page\",\n        \"zh-CN\": \"下载字典失败，请刷新页面重试\",\n        \"zh-TW\": \"下載字典失敗，請刷新頁面重試\"\n      });\n    }\n  }\n  const display = distillates.flatMap(\n    ({ category, distillate }) => {\n      if (distillate.length === 0) {\n        return []\n      } else {\n        return [\n          <div className=\"d-flex justify-content-center flex-wrap\" key={`words-${category}`}>\n            {displayWords(distillate, category === \"Unknown\")}\n          </div>,\n          <div className=\"separator\" key={`separator-${category}`}>{category}</div>\n        ];\n      }\n    }\n  ).reverse();\n  return <React.Fragment>\n    <div className=\"row\">\n      <div className=\"col-12\">\n        {display}\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-12 d-flex justify-content-center flex-wrap\">\n        <button type=\"button\" className=\"btn btn-outline-primary mt-1 mb-1\" onClick={() => { setStage(\"RequestForInput\"); setInput(\"\") }}>{i18n(\"Return\")}</button>\n        <button type=\"button\" className=\"btn btn-outline-primary mt-1 mb-1\" onClick={() => { setStage(\"RequestForText\"); setInput(\"\") }}>{i18n(\"Paste Text\")}</button>\n        <button type=\"button\" className=\"btn btn-outline-primary mt-1 mb-1\" onClick={() => { setStage(\"RequestForFile\"); setInput(\"\") }}>{i18n(\"Choose File\")}</button>\n        <div className=\"form-group mt-1 mb-1\">\n          <select className=\"form-control w-auto\" onChange={(event) => {\n            const value = event.target.value;\n            if (value === \"\") {\n              dictionaryLibrary.unselect();\n            } else {\n              dictionaryLibrary.select(event.target.value)\n            }\n          }}>\n            <option selected={dictionaryLibrary.selected === null} value=\"\">\n              {i18n({\n                \"en-US\": \"Double Click Word Show Defination: OFF\",\n                \"zh-CN\": \"双击单词显示释义：关\",\n                \"zh-TW\": \"雙擊單詞顯示釋義：關\"\n              })}\n            </option>\n            <option selected={dictionaryLibrary.selected === \"zh-CN\"} value=\"zh-CN\">\n              {DoubleClickDefineOption(i18n({\n                \"en-US\": \"Double Click Word Show Chinese Defination\",\n                \"zh-CN\": \"双击单词显示中文释义\",\n                \"zh-TW\": \"雙擊單詞顯示中文釋義\"\n              }), \"zh-CN\",\n                i18n({\n                  \"en-US\": \"English-Chinese\",\n                  \"zh-CN\": \"英汉\",\n                  \"zh-TW\": \"英漢\"\n                }))}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n  </React.Fragment >\n}\n\ntype AppStage = \"RequestForInput\" | \"RequestForText\" | \"ResultDisplay\" | \"RequestForFile\"\n\nclass App extends React.Component<{}, {\n  stage: AppStage;\n  input: string;\n  dictionaryLibraryStatus: DictionaryLibraryStatus\n}> {\n  dictionaryLibrary: DictionaryLibrary\n  constructor(props: any) {\n    super(props);\n    this.dictionaryLibrary = new DictionaryLibrary(\n      { \"zh-CN\": process.env.PUBLIC_URL + \"/dictionary.zh-CN.json\" },\n      (newDictionaryLibraryStatus) => this.setState({ dictionaryLibraryStatus: newDictionaryLibraryStatus })\n    );\n    let dictionaryLanguage = new Internationalization().getLanugage();\n    dictionaryLanguage = dictionaryLanguage === \"zh-TW\" ? \"zh-CN\" : dictionaryLanguage\n    this.dictionaryLibrary.downloadDictionary(dictionaryLanguage);\n    this.state = {\n      stage: \"RequestForInput\",\n      input: \"\",\n      dictionaryLibraryStatus: this.dictionaryLibrary.dictionaryLibraryStatus()\n    };\n    this.setStage = this.setStage.bind(this);\n    this.setInput = this.setInput.bind(this);\n    this.getInput = this.getInput.bind(this);\n  }\n\n  setStage(stage: AppStage): void {\n    this.setState({ \"stage\": stage });\n  }\n\n  setInput(input: string): void {\n    this.setState({ \"input\": input });\n  }\n\n  getInput(): string {\n    return this.state.input;\n  }\n\n  render() {\n    return <div className=\"d-flex align-items-center min-vh-100\">\n      <div className=\"container\">\n        {this.state.stage === \"RequestForInput\" && <RequestForInput setStage={this.setStage} setInput={this.setInput} />}\n        {this.state.stage === \"RequestForText\" && <RequestForText setStage={this.setStage} getInput={this.getInput} setInput={this.setInput} />}\n        {this.state.stage === \"ResultDisplay\" && <ResultDisplay dictionaryLibrary={this.dictionaryLibrary} setStage={this.setStage} getInput={this.getInput} setInput={this.setInput} />}\n        {this.state.stage === \"RequestForFile\" && <RequestForFile setStage={this.setStage} setInput={this.setInput} />}\n      </div>\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nif (process.env.REACT_APP_PAGE_VIEW_COUNT_URL) {\n  fetch(process.env.REACT_APP_PAGE_VIEW_COUNT_URL);\n}\n\nserviceWorker.register();\n"],"sourceRoot":""}