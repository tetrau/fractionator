{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Tokenizer","text","toLowerCase","replace","split","map","t","trim","filter","length","Lemmatizer","lemmaMapping","this","tokens","token","hasOwnProperty","Fractionator","wordFrequency","Object","fromEntries","word","idx","words","catagories","unGroupedDistillates","Math","min","c","toString","result","concat","category","distillate","forEach","find","r","undefined","includes","push","RequestForInput","setStage","setInput","className","type","onClick","TextInputReady","Fragment","onChange","e","target","value","ResultDisplay","getInput","tokenize","lemmas","lemmatize","display","fractionate","flatMap","join","reverse","App","props","state","stage","input","bind","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2b10ae78.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport lemmaMapping from './lemma_mapping.json'\nimport wordFrequency from './word_frequency.json'\n\nclass Tokenizer {\n  tokenize(text: string): string[] {\n    return text\n      .toLowerCase()\n      .replace(/n't/g, \"\")\n      .split(/[^a-zA-Z-]/)\n      .map(t => t.trim())\n      .filter(t => t.length > 2)\n      .filter(t => t !== \"-\")\n  }\n}\n\nclass Lemmatizer {\n  lemmaMapping: { [key: string]: string }\n  constructor() {\n    this.lemmaMapping = lemmaMapping\n\n  }\n  lemmatize(tokens: string[]): string[] {\n    return tokens.map(token => {\n      if (this.lemmaMapping.hasOwnProperty(token)) {\n        return this.lemmaMapping[token]\n      }\n      else {\n        return token\n      }\n    })\n  }\n}\n\ninterface Distillate {\n  category: string;\n  distillate: string[]\n}\n\nclass Fractionator {\n  wordFrequency: { [w: string]: number } = Object.fromEntries(wordFrequency.map((word, idx) => [word, idx + 1]))\n  fractionate(words: string[]): Distillate[] {\n    const catagories: number[] = [800, 1600, 3200, 6400, 12800, 25600, 51200, 102400]\n    const unGroupedDistillates: [string, string][] = words.map(word => {\n      if (this.wordFrequency.hasOwnProperty(word)) {\n        return [word, Math.min(...catagories.filter(c => c > this.wordFrequency[word])).toString()]\n      } else {\n        return [word, \"Unknown\"]\n      }\n    })\n    const result: Distillate[] = (catagories.map(c => c.toString()).concat([\"Unknown\"])).map(\n      c => {\n        const r: { category: string, distillate: string[] } = { category: c, distillate: [] }\n        return r\n      }\n    )\n    unGroupedDistillates.forEach(distillate => {\n      const c = result.find(r => r.category === distillate[1])\n      if (c !== undefined && !c.distillate.includes(distillate[0])) {\n        c.distillate.push(distillate[0])\n      }\n    })\n    return result\n  }\n}\n\ninterface GeneralAppComponentProps {\n  setStage: (stage: AppStage) => void;\n  setInput: (input: string) => void\n}\n\nconst RequestForInput: React.FunctionComponent<GeneralAppComponentProps> = ({ setStage, setInput }) =>\n  <div className=\"row\">\n    <div className=\"col-12 d-flex justify-content-center\">\n      <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => setStage(\"TextInputReady\")}>Paste Text</button>\n      <button type=\"button\" className=\"btn btn-outline-primary\">Choose File</button>\n    </div>\n  </div>\n\nconst TextInputReady: React.FunctionComponent<GeneralAppComponentProps> = ({ setStage, setInput }) =>\n  <React.Fragment>\n    <div className=\"row\">\n      <div className=\"col-12\">\n        <textarea className=\"form-control\" onChange={e => setInput(e.target.value)} ></textarea>\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-12 d-flex justify-content-center\">\n        <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => setStage(\"TextInputReady\")}>Choose File</button>\n        <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => setStage(\"ResultDisplay\")}>Fractionate</button>\n      </div>\n    </div>\n  </React.Fragment>\n\ninterface ResultDisplayProps {\n  setStage: (stage: AppStage) => void;\n  setInput: (input: string) => void\n  getInput: () => string;\n\n}\n\nconst ResultDisplay: React.FunctionComponent<ResultDisplayProps> = ({ setStage, getInput, setInput }) => {\n  const tokens = new Tokenizer().tokenize(getInput())\n  const lemmas = new Lemmatizer().lemmatize(tokens)\n  const distillates = new Fractionator().fractionate(lemmas)\n  const display = distillates.flatMap(\n    ({ category, distillate }) => {\n      if (distillate.length === 0) {\n        return []\n      } else {\n        return <React.Fragment>\n          <div className=\"separator\">{category}</div>\n          <p className=\"text-center\">{distillate.join(\" \")}</p>\n        </React.Fragment>\n      }\n    }\n  ).reverse()\n  return <React.Fragment>\n    <div className=\"row\">\n      <div className=\"col-12\">\n        {display}\n      </div>\n    </div>\n    <div className=\"row\">\n      <div className=\"col-12 d-flex justify-content-center\">\n        <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => { setStage(\"TextInputReady\"); setInput(\"\") }}>Paste Text</button>\n        <button type=\"button\" className=\"btn btn-outline-primary\">Choose File</button>\n      </div>\n    </div>\n  </React.Fragment>\n}\n\ntype AppStage = \"RequestForInput\" | \"TextInputReady\" | \"ResultDisplay\"\n\ninterface AppState {\n  stage: AppStage;\n  input: string\n}\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      stage: \"RequestForInput\",\n      input: \"\"\n    };\n    this.setStage = this.setStage.bind(this);\n    this.setInput = this.setInput.bind(this);\n    this.getInput = this.getInput.bind(this);\n  }\n\n  setStage(stage: AppStage): void {\n    this.setState({ \"stage\": stage });\n  }\n\n  setInput(input: string): void {\n    this.setState({ \"input\": input });\n  }\n\n  getInput(): string {\n    return this.state.input;\n  }\n\n  render() {\n    return <div className=\"d-flex align-items-center min-vh-100\">\n      <div className=\"container\">\n        {this.state.stage === \"RequestForInput\" && <RequestForInput setStage={this.setStage} setInput={this.setInput} />}\n        {this.state.stage === \"TextInputReady\" && <TextInputReady setStage={this.setStage} setInput={this.setInput} />}\n        {this.state.stage === \"ResultDisplay\" && <ResultDisplay setStage={this.setStage} getInput={this.getInput} setInput={this.setInput} />}\n      </div>\n    </div>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}